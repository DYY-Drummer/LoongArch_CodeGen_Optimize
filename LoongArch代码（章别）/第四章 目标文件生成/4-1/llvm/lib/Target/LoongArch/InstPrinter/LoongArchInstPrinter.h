//===-- LoongArchInstPrinter.h - Convert MCInst to assembly syntax ---*- C++ -*-===//
//
// This class prints a LoongArchMCInst to an assembly file.
//
//===----------------------------------------------------------------------===//
#ifndef LLVM_LIB_TARGET_LOONGARCH_INSTPRINTER_LOONGARCHINSTPRINTER_H
#define LLVM_LIB_TARGET_LOONGARCH_INSTPRINTER_LOONGARCHINSTPRINTER_H

#include "llvm/MC/MCInstPrinter.h"
#include ""

namespace llvm {
// These enumeration declarations were orignally in LoongArchInstrInfo.h but
// had to be moved here to avoid circular dependencies between
// LLVMLoongArchCodeGen and LLVMLoongArchAsmPrinter.
    class TargetMachine;
    class LoongArchInstPrinter : public MCInstPrinter {
    public:
        LoongArchInstPrinter(const MCAsmInfo &MAI, const MCInstrInfo &MII,
                        const MCRegisterInfo &MRI)
                : MCInstPrinter(MAI, MII, MRI) {}
// Autogenerated by tblgen.

        void printInstruction(const MCInst *MI, uint64_t Address, raw_ostream &O);
        static const char *getRegisterName(unsigned RegNo);
        void printRegName(raw_ostream &OS, unsigned RegNo) const override;
        void printInst(const MCInst *MI, uint64_t Address, StringRef Annot,
                       const MCSubtargetInfo &STI, raw_ostream &O) override;

        bool printAliasInstr(const MCInst *MI, raw_ostream &OS);
        void printCustomAliasOperand(const MCInst *MI,
                                     unsigned OpIdx, unsigned PrintMethodIdx,
                                     raw_ostream &O);
    private:
        void printOperand(const MCInst *MI, unsigned OpNo, raw_ostream &O);
        void printOperand(const MCInst *MI, uint64_t /*Address*/, unsigned OpNum,
                          raw_ostream &O) {
            printOperand(MI, OpNum, O);
        }
        void printUnsignedImm(const MCInst *MI, int opNum, raw_ostream &O);
        void printMemOperand(const MCInst *MI, int opNum, raw_ostream &O);
//#if CH >= CH7_1
        void printMemOperandEA(const MCInst *MI, int opNum, raw_ostream &O);
//#endif
    };
} // end namespace llvm
#endif