//===-- LoongArchSubtarget.h - Define Subtarget for the LoongArch ---------*- C++ -*-===//
//
//===----------------------------------------------------------------------===//
//
// This file declares the LoongArch specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_LOONGARCH_LOONGARCHSUBTARGET_H
#define LLVM_LIB_TARGET_LOONGARCH_LOONGARCHSUBTARGET_H

#include "LoongArchFrameLowering.h"
#include "LoongArchISelLowering.h"
#include "LoongArchInstrInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/MC/MCInstrItineraries.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "LoongArchGenSubtargetInfo.inc"

extern bool LoongArchReserveGP;
extern bool LoongArchNoCpload;

namespace llvm {
    class StringRef;

    class LoongArchTargetMachine;

    class LoongArchSubtarget : public LoongArchGenSubtargetInfo {
        virtual void anchor();
        bool HasBasicF = false;
        bool HasBasicD = false;
        bool HasExtLSX = false;
        bool HasExtLASX = false;
        bool HasExtLVZ = false;
        bool HasExtLBT = false;
        bool HasLaGlobalWithPcrel = false;
        bool HasLaGlobalWithAbs = false;
        bool HasLaLocalWithAbs = false;
    protected:
        enum LoongArchArchEnum {
            LoongArch32
          //LoongArch64
        };

        // LoongArch architecture version
        // Controled by -mcpu in commandline
        LoongArchArchEnum LoongArchArchVersion;

        // IsLittle - The target is Little Endian
        bool IsLittle;

        bool EnableOverflow;

        // HasSlt - slt instructions.
        bool HasSlt;

        InstrItineraryData InstrItins;

        // UseSmallSection - Small section is used.
        bool UseSmallSection;

        const LoongArchTargetMachine &TM;

        Triple TargetTriple;

        const SelectionDAGTargetInfo TSInfo;

        std::unique_ptr<const LoongArchInstrInfo> InstrInfo;
        std::unique_ptr<const LoongArchFrameLowering> FrameLowering;
        std::unique_ptr<const LoongArchTargetLowering> TLInfo;

    public:
        bool isPositionIndependent() const;
        const LoongArchABIInfo &getABI() const;

        // This constructor initializes the data members to match that
        // of the specified triple.
        LoongArchSubtarget(const Triple &TT, const std::string &CPU, const std::string &FS,
                      bool little, const LoongArchTargetMachine &_TM);

        // Parses features string setting specified
        // subtarget options.  Definition of function is auto generated by tblgen.
        void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

        bool isLittle() const { return IsLittle; }
        //LoongArch64 include LoongArch32
        bool hasLoongArch32() const { return LoongArchArchVersion >= LoongArch32; }
        bool isLoongArch32() const { return LoongArchArchVersion == LoongArch32; }

        // Features related to the presence of specific instructions.
        bool enableOverflow() const { return EnableOverflow; }
        bool disableOverflow() const { return !EnableOverflow; }
        bool hasSlt()   const { return HasSlt; }
        bool hasBasicF() const { return HasBasicF; }
        bool hasBasicD() const { return HasBasicD; }
        bool hasExtLSX() const { return HasExtLSX; }
        bool hasExtLASX() const { return HasExtLASX; }
        bool hasExtLVZ() const { return HasExtLVZ; }
        bool hasExtLBT() const { return HasExtLBT; }
        bool hasLaGlobalWithPcrel() const { return HasLaGlobalWithPcrel; }
        bool hasLaGlobalWithAbs() const { return HasLaGlobalWithAbs; }
        bool hasLaLocalWithAbs() const { return HasLaLocalWithAbs; }

        bool useSmallSection() const { return UseSmallSection; }

        bool abiUsesSoftFloat() const;

        bool enableLongBranchPass() const {
            return hasLoongArch32();
        }

        unsigned stackAlignment() const { return 16; }

        LoongArchSubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS,
                                                       const TargetMachine &TM);

        const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
            return &TSInfo;
        }
        const LoongArchInstrInfo *getInstrInfo() const override { return InstrInfo.get(); }
        const TargetFrameLowering *getFrameLowering() const override {
            return FrameLowering.get();
        }
        const LoongArchRegisterInfo *getRegisterInfo() const override {
            return &InstrInfo->getRegisterInfo();
        }
        const LoongArchTargetLowering *getTargetLowering() const override {
            return TLInfo.get();
        }
        const InstrItineraryData *getInstrItineraryData() const override {
            return &InstrItins;
        }
    };
} // End llvm namespace

#endif